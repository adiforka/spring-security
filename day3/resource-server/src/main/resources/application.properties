# We need to verify access token against authorization server. There are a few ways hot do accomplish that
## OPAQUE TOKENS
## 1. accessing so-called introspection URL to check token. The downside of this approach is that it often requires
##    client ID and secret on resource server side (resource server is a client itself so different sets of credentials)
## https://docs.spring.io/spring-security-oauth2-boot/docs/current/reference/html/boot-features-security-oauth2-resource-server.html#oauth2-boot-resource-server-token-info

security.oauth2.resource.token-info-uri=http://localhost:8080/oauth/check_token
security.oauth2.client.client-id=resource-server-client
security.oauth2.client.client-secret=resource-server-secret

## 2. We can access user-info-uri endpoint that returns information about user that was granted access token
##    user-info endpoint must be created on authorization server
## https://docs.spring.io/spring-security-oauth2-boot/docs/current/reference/html/boot-features-security-oauth2-resource-server.html#oauth2-boot-resource-server-user-info

#security.oauth2.resource.user-info-uri=http://localhost:8080/profile/me

## JWT Tokens
## TODO
## We can verify JWT token against its cryptographic signature and all required token information is received from token itself.
## It is less secured in some scenarios as by design there is no token revocation while using JWT
## Authorization Server should expose publicly available endpoint with JWK set
## https://docs.spring.io/spring-security-oauth2-boot/docs/current/reference/html/boot-features-security-oauth2-resource-server.html#jwt

server.port=8082